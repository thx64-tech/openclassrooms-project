#!/bin/bash

##############################################################
#
#  Description : deploiement a la volee de conteneur docker
#
#  Auteur : Thx64
#
#  Date : 17/02/2021
#
#  mot de passe cryptage : perl -e 'print crypt("poiuytre", "poiuytre"), "\n"'
#
##############################################################

# Functions ##################################################

help (){ echo "

Options :
        - --create : lancer des conteneurs

	- --drop : supprimer les conteneurs

	- --infos : caracteristiques des conteneurs (ip, nom, user...)

	- --start : redemarrage des conteneurs

	- --ansible : deploiement arborescence ansible "
}

createNodes(){
   # definition du nombre de conteneur
   nb_machine=1
   [ "$1" != "" ] && nb_machine=$1
   # setting min/max
   min=1
   max=0

   # recuperation de idmax
   idmax=`docker ps -a --format '{{ .Names}}' | awk -F "-" -v user="$USER" '$0 ~ user"-debian" {print $3}' | sort -r |head -1`
   # redefinition de min et max
   min=$(($idmax + 1))
   max=$(($idmax + $nb_machine))
   file1=/home/thx64/.ssh/known_hosts
   [[ -f "$file1" ]] && rm $file1
   # lancement des conteneurs
   for i in $(seq $min $max);do
#       docker run -tid --privileged --publish-all=true -v /srv/data:/srv/html -v /sys/fs/cgroup:/sys/fs/cgroup:ro --name $USER-debian-$i -h $USER-debian-$i priximmo/stretch-systemd-ssh:v3.3
#      docker run -tid --privileged --publish-all=true -v /srv/data:/srv/html -v /sys/fs/cgroup:/sys/fs/cgroup:ro --name $USER-debian-$i -h $USER-debian-$i monbuntu:v3.7
      docker run -tid --privileged --publish-all=true -v /srv/data:/srv/html -v /sys/fs/cgroup:/sys/fs/cgroup:ro --name $USER-debian-$i -h $USER-debian-$i bounty:v7.0 

#      docker exec -ti $USER-debian-$i /bin/zsh -c "useradd -m -p poJZVwWgwb1rA $USER"
#      docker exec -ti $USER-debian-$i /bin/bash -c "mkdir ${HOME}/.ssh && chmod 700 ${HOME}/.ssh && chown $USER:$USER $HOME/.ssh"
#      docker cp $HOME/.ssh/id_rsa $USER-debian-$i:$HOME/.ssh/id_rsa
#      docker cp $HOME/.ssh/id_rsa.pub $USER-debian-$i:$HOME/.ssh/id_rsa.pub
#      docker cp $HOME/.ssh/id_rsa.pub $USER-debian-$i:$HOME/.ssh/authorized_keys
#      docker exec -ti $USER-debian-$i /bin/zsh -c "chmod 600 ${HOME}/.ssh/id_rsa && chown $USER:$USER $HOME/.ssh/id_rsa"
#      docker exec -ti $USER-debian-$i /bin/zsh -c "chmod 600 ${HOME}/.ssh/id_rsa.pub && chown $USER:$USER $HOME/.ssh/id_rsa.pub"
#      docker exec -ti $USER-debian-$i /bin/zsh -c "chmod 600 ${HOME}/.ssh/authorized_keys  && chown $USER:$USER $HOME/.ssh/authorized_keys"
#      docker exec -ti $USER-debian-$i /bin/zsh -c "echo '$USER ALL=(ALL) NOPASSWD: ALL'>>/etc/sudoers"
      docker exec -ti $USER-debian-$i /bin/zsh -c "service ssh start"
      echo "Conteneur $USER-debian-$i cree"
   done
}

dropNodes(){
   echo "Suppression des conteneurs..." docker
   for i in $(docker ps -a | grep $USER-debian | awk '{print $1}');do
     docker stop $i
     docker rm $i
   done
   echo "Fin de la suppression"
}

startNodes(){
   echo ""
   docker start $(docker ps -a | grep $USER-debian | awk '{print $1}')
   for conteneur in $(docker ps -a | grep $USER-debian | awk '{print $1}');do
      docker exec -ti $conteneur /bin/zsh -c "service ssh start"
   done
   echo ""
}

createAnsible(){
   echo ""
   ANSIBLE_DIR="ansible_dir"
   mkdir -p $ANSIBLE_DIR
   echo "all:" > $ANSIBLE_DIR/00_inventory.yml
   echo " vars:" >> $ANSIBLE_DIR/00_inventory.yml
   echo " ansible_python_interpreter: /usr/bin/python3.9" >> $ANSIBLE_DIR/00_inventory.yml
   echo " hosts:" >> $ANSIBLE_DIR/00_inventory.yml
   for conteneur in $(docker ps -a | grep $USER-debian | awk '{print $1}');do
      docker inspect -f ' {{.NetworkSettings.IPAddress }}:' $conteneur >> $ANSIBLE_DIR/00_inventory.yml
   done
   mkdir -p $ANSIBLE_DIR/host_vars
   mkdir -p $ANSIBLE_DIR/group_vars
   echo ""
}

infosNodes(){
   echo ""
   echo "Informations des conteneurs : "
   echo ""
   for conteneur in $(docker ps -a | grep $USER-debian | awk '{print $1}');do
      docker inspect -f ' => {{.Name}} - {{.NetworkSettings.IPAddress }}' $conteneur
   done
   echo ""
}

#si option --create
if [ "$1" == "--create" ];then
   createNodes $2
   infosNodes

# si option --drop
elif [ "$1" == "--drop" ];then
   dropNodes

# si option --start
elif [ "$1" == "--start" ];then
   startNodes

# si option --ansible
elif [ "$1" == "--ansible" ];then
   createAnsible

elif [ "$1" == "--infos" ];then
   infosNodes

# si aucune option affichage de l'aide
else
   help
fi
